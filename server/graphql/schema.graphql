#import models/auth.graphql
#import models/store.graphql
#import models/store-member.graphql

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")


"Validation error details."
type ValidationError {
    "The field that failed validation."
    field: String!

    "All validation error messages for this field."
    messages: [String!]!
}

"Error response for mutations."
type MutationError {
    "Error message."
    message: String!

    "Validation errors if applicable."
    validationErrors: [ValidationError!]

    "Error code for client handling."
    code: String
}

"Base success response interface."
interface MutationSuccess {
    "Success message."
    message: String
}

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "Get all stores owned by the authenticated user."
    myStores: [Store!]! @guard @field(resolver: "App\\GraphQL\\Queries\\MyStoresQuery")

    "Find a store by slug."
    storeBySlug(
      "Store slug."
      slug: String! @rules(apply: ["required", "string", "max:255"])
    ): Store @field(resolver: "App\\GraphQL\\Queries\\StoreBySlugQuery")

    "Find a store by domain."
    storeByDomain(
      "Store domain."
      domain: String! @rules(apply: ["required", "string", "max:255"])
    ): Store @field(resolver: "App\\GraphQL\\Queries\\StoreByDomainQuery")
}
